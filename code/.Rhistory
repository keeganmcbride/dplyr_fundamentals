knitr::opts_chunk$set(echo = TRUE)
dat1 %>% select(name:hair_color) %>%
View()
# install.packages("dplyr")
library(dplyr)
starwars
starwars
head(starwars)
dat <- starwars
# First 5 rows
slice(dat, 1:5)
dat1 <- slice(dat, 1:5)
# Select by name of columns
dat1 %>% select(name, mass, hair_color) %>%
View()
dat1 %>% select(name:hair_color) %>%
View()
# Select by name of columns
dat1 %>% select(name, hair_color) %>%
View()
dat1 %>% select(!(mass, hair_color)) %>%
dat1 %>% select(!(mass:hair_color)) %>%
View()
# Rename variables
dat1 %>% select(fabulous_name = name) %>%
View()
dat1 %>% rename(fabulous_name = name) %>%
View()
dat %>% mutate(BMI = mass/(height^2)) %>%
select(name, BMI, everything()) %>%
View()
dat1 %>% mutate(BMI = mass/(height^2)) %>%
select(name, BMI, everything()) %>%
View()
dat1 %>% mutate(BMI = mass/(height^2)) %>%
select(name, BMI, everything()) %>%
View()
# Constructing a BMI column
dat1$height <- dat1$height/100
dat1 %>% mutate(BMI = mass/(height^2)) %>%
select(name, BMI, everything()) %>%
View()
height = height/100,
height_m = height/100,
# transmute() to only keep the new variables
dat1 %>% transmute(
height_m = height / 100,
BMI = mass / (height_m^2)
)
height = height / 100,
height_m = height / 100,
# transmute() to only keep the new variables
dat1 %>% transmute(
height_m = height / 100,
BMI = mass / (height_m^2)
)
transmute(
height_m = height/100,
BMI = mass/(height_m^2)
)
height_m = height / 100,
height_m = height / 100,
height_m = height / 100 ,
height_m = height / 100,
to only keep the new variables
# transmute() to only keep the new variables
dat1 %>% transmute(
height_m = height / 100,
BMI = mass / (height_m^2)
)
# Constructing a BMI column
dat1$height <- dat1$height/100
dat1 %>% mutate(BMI = mass/(height^2)) %>%
select(name, BMI, everything()) %>%
View()
# transmute() to only keep the new variables
dat1 %>% transmute(
height_m = height / 100,
BMI = mass / (height_m^2)
)
dat1 %>% mutate(BMI = mass/(height^2)) %>%
select(name, BMI, everything())
# transmute() to only keep the new variables
dat1 %>% transmute(
height_m = height / 100,
BMI = mass / (height_m^2)
)
dat %>% mutate(height = height/2, BMI = mass/(height^2))
dat %>% mutate(height = height/2, BMI = mass/(height^2)) %>% select(BMI)
# Constructing a BMI column
dat1$height <- dat1$height/100
dat1 %>% mutate(BMI = mass/(height^2)) %>%
select(name, BMI, everything())
# transmute() to only keep the new variables
# Instead of separately preparing the height measure, you can
# also include it in the function
dat1 %>% transmute(
height_m = height / 100,
BMI = mass / (height_m^2)
)
dat1 %>% mutate(height + 10)
dat %>% slice(1:5) %>%
mutate(height + 10)
dat1 %>% relocate(mass:eye_color, .before = height)
?relocate
dat1 %>% relocate(mass:eye_color, .ater = height
mass
dat1 %>% relocate(mass:eye_color, .ater = height
dat1 %>% relocate(mass:eye_color, .before = height)
dat1 %>% relocate(mass:eye_color, .after = height
dat1 %>% relocate(mass:eye_color, .after = height
dat1 %>% relocate(mass:eye_color, .after = height)
# Putting height
dat1 %>% relocate(mass:eye_color, .before = height)
dat1 %>% relocate(mass:eye_color, .after = height)
# Only getting mean height
dat1  %>% summarise(mean_height = mean(height, na.rm = TRUE))
# Only getting mean height
dat1  %>% summarise(mean_height = mean(height/100, na.rm = TRUE))
# Only getting mean height
dat1  %>% summarise(mean_height = mean(height, na.rm = TRUE))
# Only getting mean height
dat1  %>% summarise(
mean_height = mean(height, na.rm = TRUE),
mean_mass = mean(mass, na.rm = TRUE)
)
# Instead of the mean height across all creatues, let's focus mean height
# for each species
dat %>% group_by(species) %>%
select(height, mass) %>%
summarize(
mean_height = mean(height, na.rm = TRUE),
mean_mass = mean(mass, na.rm = TRUE)
)
?count
dat %>% count(species)
dat %>% count(species, wt = mass)
View(dat)
# Counting the
dat %>% count(gender, wt = mass)
# Alternative way: n()
dat %>% group_by(species) %>%
summarize(n = n())
?n
dat %>% complete(height)
who
?gather
table1
