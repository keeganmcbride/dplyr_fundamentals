dat %>% mutate(height = height/2, BMI = mass/(height^2)) %>% select(BMI)
# Constructing a BMI column
dat1$height <- dat1$height/100
dat1 %>% mutate(BMI = mass/(height^2)) %>%
select(name, BMI, everything())
# transmute() to only keep the new variables
# Instead of separately preparing the height measure, you can
# also include it in the function
dat1 %>% transmute(
height_m = height / 100,
BMI = mass / (height_m^2)
)
dat1 %>% mutate(height + 10)
dat %>% slice(1:5) %>%
mutate(height + 10)
dat1 %>% relocate(mass:eye_color, .before = height)
?relocate
dat1 %>% relocate(mass:eye_color, .ater = height
mass
dat1 %>% relocate(mass:eye_color, .ater = height
dat1 %>% relocate(mass:eye_color, .before = height)
dat1 %>% relocate(mass:eye_color, .after = height
dat1 %>% relocate(mass:eye_color, .after = height
dat1 %>% relocate(mass:eye_color, .after = height)
# Putting height
dat1 %>% relocate(mass:eye_color, .before = height)
dat1 %>% relocate(mass:eye_color, .after = height)
# Only getting mean height
dat1  %>% summarise(mean_height = mean(height, na.rm = TRUE))
# Only getting mean height
dat1  %>% summarise(mean_height = mean(height/100, na.rm = TRUE))
# Only getting mean height
dat1  %>% summarise(mean_height = mean(height, na.rm = TRUE))
# Only getting mean height
dat1  %>% summarise(
mean_height = mean(height, na.rm = TRUE),
mean_mass = mean(mass, na.rm = TRUE)
)
# Instead of the mean height across all creatues, let's focus mean height
# for each species
dat %>% group_by(species) %>%
select(height, mass) %>%
summarize(
mean_height = mean(height, na.rm = TRUE),
mean_mass = mean(mass, na.rm = TRUE)
)
?count
dat %>% count(species)
dat %>% count(species, wt = mass)
View(dat)
# Counting the
dat %>% count(gender, wt = mass)
# Alternative way: n()
dat %>% group_by(species) %>%
summarize(n = n())
?n
dat %>% complete(height)
who
?gather
table1
knitr::opts_chunk$set(echo = TRUE)
# install.packages("dplyr")
library(dplyr)
starwars
head(starwars)
dat <- starwars
# Ugly example
dat1 <- select(dat, c(name, height, mass))
dat1_1 <- filter(dat1, height >= 100)
View(dat1_1)
# Beautiful example
dat1 <- dat %>% select(name, height, mass) %>%
filter(height >= 100) %>%
View()
# Filter for numerical values and character values
dat %>% filter(height >= 100,
eye_color == "yellow") %>%
View()
# Filter for A OR B
dat %>% filter(height >= 100 | eye_color == "yellow") %>%
View()
# Filter for several values of the same type
dat %>% filter(hair_color %in% c("blond", "brown")) %>%
View()
# Filter out cases
dat %>% filter(!(height >=100)) %>%
View()
# First 5 rows
slice(dat, 1:5)
# slice_head() for rows at the top of the df
# n refers to amount of desired observations
slice_head(dat, n = 3)
# slice_tail() for rows at the bottom of the df
dat %>% slice_tail(n = 4)
# slice_sample() for random selection
# prop for proportion of cases
dat %>% slice_sample(n = 4)
dat %>% slice_sample(prop = 0.1)
# slice_max() for rows with highest values of a variable
dat %>% slice_max(height, n = 3)
# slice_min() for rows with lowest values of a variable
dat %>% slice_min(mass, n = 3)
# Default is ascending
dat %>% slice(1:5) %>%
arrange(mass) %>%
View()
# Descending
dat %>% slice(1_5 %>%
# Variation: summarise_at() to affect variables selected with a
# character vector or vars()
dat %>% summarise_at(vars(c(5:10)))
# Variation: summarise_at() to affect variables selected with a
# character vector or vars()
dat %>% summarise_at(vars(c(5:10)), mean, na.rm = T)
# Variation: summarise_at() to affect variables selected with a
# character vector or vars()
dat %>% summarise_at(vars(c(7)), mean, na.rm = T)
View(dat)
# Variation: summarise_at() to affect variables selected with a
# character vector or vars()
dat %>% summarise_at(vars(c(2, 7)), mean, na.rm = T)
dat %>% summarise_at("mass", mean)
class(dat$mass)
dat %>% summarise_at(mass, mean)
dat %>% summarise_at(c(mass), mean)
dat %>% summarise_at(c("mass"), mean)
dat %>% summarise_at(c("mass"), mean, na.rm = T)
dat %>% summarise_at("mass", mean, na.rm = T)
# Variation: summarise_at() to affect variables selected with a
# character vector or vars()
dat %>% summarise_at(vars(c(2, 7)), mean, na.rm = TRUE)
dat %>% summarise_at(vars(height:mass), na.rm = TRUE)
dat %>% summarise_at(vars(height:mass), mean, na.rm = TRUE)
# Variation: summarise_all() to affect every variable
dat %>% summarise_all(min, max)
# Variation: summarise_all() to affect every variable
dat %>% summarise_all(list(min, max))
# Variation: summarise_all() to affect every variable
dat %>% summarise_all(list(min, max))
# Variation: summarise_if() affects variables selected with a
# predicate function
dat %>% summarise_if(is.numeric, mean, na.rm = True)
# Variation: summarise_if() affects variables selected with a
# predicate function
dat %>% summarise_if(is.numeric, mean, na.rm = TRUE)
# Default is ascending
dat %>% slice(1:5) %>%
arrange(mass) %>%
View()
# Descending
dat %>% slice(1_5 %>%
dat1 <- slice(dat, 1:5)
# Select by name of columns
dat1 %>% select(name, hair_color) %>%
View()
dat1 %>% select(name:hair_color) %>%
View()
# Exclude by name
dat1 %>% select(-mass, -hair_color) %>%
View()
dat1 %>% select(!(mass:hair_color)) %>%
View()
# Select columns by feature
dat1 %>% select(contains("color")) %>%
View()
dat1 %>% select(-ends_with("color")) %>%
# opposite is starts_with()
View()
# Rename variables
# Not recommended because it drops all other variables
dat1 %>% select(fabulous_name = name) %>%
View()
# Reorder
dat1 %>% select(name, hair_color, skin_color, everything()) %>%
View()
# Default is ascending
dat %>% slice(1:5) %>%
arrange(mass) %>%
View()
# Descending
dat %>% slice(1_5) %>%
# Default is ascending
dat %>% slice(1:5) %>%
arrange(mass) %>%
View()
# Descending
dat %>% slice(1:5) %>%
arrange(desc(mass)) %>%
View()
## grep()
## Purpose:
?grep
## Structure: grep(pattern, df)
grep("hair", dat)
## Structure: grep(pattern, df)
grep("mass", dat)
## Structure: grep(pattern, df)
d <- grep("mass", dat)
lenngth(d)
length(d)
## Structure: grep(pattern, df)
d <- grep("blonde", dat$hair_color)
length(d)
grep("blonde", dat$hair_color)
## Structure: grep(pattern, df)
grep("blonde", dat$hair_color)
View(dat)
## Structure: grep(pattern, df)
grep("blond", dat$hair_color)
length(d)
dat[grep("blond", dat$hair_color),]
dat[,grep("blond", dat$hair_color)]
dat[,grep("color"), colnames(dat)]
dat[,grep("color"), colnames(dat))]
dat[,grep("color", colnames(dat))]
?gsub
## Structure: gsub(pattern_to_be_replaced, new_pattern, df)
gsub("blond", "yellow", dat$hair_color)
## Structure: gsub(pattern_to_be_replaced, new_pattern, df)
x <- gsub("blond", "yellow", dat$hair_color)
View(x)
## Structure: gsub(pattern_to_be_replaced, new_pattern, df)
gsub("brown", "brunette", dat$hair_color)
dat %>% mutate(gsub("brown", "brunette", dat$hair_color))
dat %>% mutate(gsub("brown", "brunette", dat$hair_color)) %>%
View()
dat %>% mutate(gsub("brown", "brunette", dat$hair_color)) %>%
View()
dat %>% mutate(~gsub("brown", "brunette", dat$hair_color)) %>%
View()
dat %>% mutate_at(vars(hair_color), ~gsub("brown", "brunette")) %>%
View()
View(dat)
dat %>% mutate_at(vars(hair_color), ~gsub("brown", "brunette"), na.rm = T) %>%
View()
dat_na <- dat[!is.na(dat$hair_color)]
dat_na <- dat[!(is.na(dat$hair_color)|dat$hair_color == ""),]
dat_na %>% mutate_at(vars(hair_color), ~gsub("brown", "brunette")) %>%
View()
View(dat_na)
dat_na %>% mutate_at(vars(hair_color), ~gsub("brown", "brunette",.)) %>%
View()
dat_na %>% mutate_at(vars(hair_color), gsub("brown", "brunette",.)) %>%
View()
dat_na %>% mutate_at(vars(hair_color), ~gsub("brown", "brunette",.)) %>%
View()
table(dat$hair_color)
dat %>% filter(species = human) %>% summarize(mean(mass))
dat %>% filter(species == human) %>% summarize(mean(mass))
dat %>% filter(species == "human") %>% summarize(mean(mass))
dat %>% filter(species == "human") %>% summarize(mean(mass, na.rm = TRUE))
dat %>% filter(species == "human")
View(dat)
dat$species
table(dat$species)
dat %>% filter(species == "Human") %>% summarise(mean(mass, na.rm = T))
dat %>% filter(species == "Human") %>% summarise(mean(min, na.rm = T))
dat %>% filter(species == "Human") %>% summarise(min, na.rm = T))
dat %>% filter(species == "Human") %>% summarise(min(mass, na.rm = T))
dat %>% filter(species == "Human") %>% summarise(max(mass, na.rm = T))
dat %>% filter(species == "Human") %>% summarise(range(mass, na.rm = T))
library(tidyr)
install.package("tidyr")
install.packages("tidyr")
?gather
?pivot_longer
library(tidyr)
?gather
## pivot_longer(), formally known as gather()
?pivot_longer
## Structure: pivot_longer(df, new_colname, col_to_pivot/ungroup)
dat %>% pivot_longer("Hair_color", hair_color)
## Structure: pivot_longer(df, new_colname, col_to_pivot/ungroup)
dat %>% pivot_longer(hair_color, "Hair_color")
## Structure: pivot_longer(df, new_colname, col_to_pivot/ungroup)
dat %>% pivot_longer(hair_color, "Hair_color") %>% View()
## pivot_wider(), formally known as spread()
?pivot_wider
## Structure: pivot_wider(df, col_to_group/pivot, new_colname)
dat %>% pivot_wider(ends_with("color"), "body_part", "color")
## Structure: pivot_wider(df, col_to_group/pivot, new_colname)
dat %>% pivot_wider(ends_with("color"), names_to ="body_part", #
values_to ="color")
dat %>% seletc(name, homeworld, species)
## Structure: pivot_wider(df, )
dat %>% select(name, homeworld, species) %>%
pivot_wider(names_from = ends_with("color"),
values_from ="body_part", #
values_to ="color")
dat %>% select(name, homeworld, species)
## Structure: pivot_wider(df, )
dat %>% select(name, homeworld, species) %>%
pivot_wider(names_from = homeworld,
values_from = species)
## Structure: pivot_wider(df, )
dat %>% select(name, sex, gender) %>%
pivot_wider(names_from = sex,
values_from = gender)
## Structure: pivot_longer(df, )
dat %>% pivot_longer(hair_color, "Hair_color") %>% View()
## pivot_longer(), formally known as gather()
?pivot_longer
dat %>% pivot_longer(cols = ends_with("color"),
names_to = "col", .value) %>% View()
dat %>% pivot_longer(cols = ends_with("color"),
names_to = "col", ".value") %>% View()
dat %>% pivot_longer(cols = ends_with("color"),
names_to = "col", "value") %>% View()
dat <- dat_long %>% pivot_wider(names_from = "col",
values_from = value) %>% View()
dat_long <- dat %>% pivot_longer(cols = ends_with("color"),
names_to = "col", "value") %>% View()
es_from = "col",
dat <- dat_long %>% pivot_wider(names_from = "col",
values_from = value) %>%
select(name, col, value, everything()) %>%
View()
dat_long <- dat %>% pivot_longer(cols = ends_with("color"),
names_to = "col", "value") %>%
select(name, col, value, everything()) %>%
View()
dat <- dat_long %>% pivot_wider(names_from = "col",
values_from = value) %>%
select(name, col, value, everything()) %>%
View()
dat_long <- dat %>% pivot_longer(cols = ends_with("color"),
names_to = "col", "value") %>%
select(name, col, value, everything()) %>%
View()
class(dat_long)
dat_long <- dat %>% pivot_longer(cols = ends_with("color"),
names_to = "col", "value") %>%
select(name, col, value, everything()) %>%
View()
dat_long <- dat %>% pivot_longer(cols = ends_with("color"),
names_to = "col", "value") %>%
select(name, col, value, everything())
View(dat_long)
dat_long %>% pivot_wider(names_from = "col",
values_from = value) %>%
select(name, col, value, everything()) %>%
View()
View(dat_long)
str(dat_long)
dat_long %>% pivot_wider(names_from = col,
values_from = value) %>%
select(name, col, value, everything()) %>%
View()
dat_long %>% pivot_wider(names_from = col,
values_from = value) %>%
View()
dat_long %>% pivot_wider(names_from = col,
values_from = value) %>%
View()
# install.packages("dplyr")
library(dplyr)
starwars
starwars
starwars
head(starwars)
dat <- starwars
# Filter for numerical values and character values
filter(dat, height >= 100)
dat %>% filter(height >= 100,
eye_color == "yellow") %>%
View()
|
# Filter for A OR B
dat %>% filter(height >= 100 | eye_color == "yellow") %>%
View()
# Filter for several values of the same type
dat %>% filter(hair_color %in% c("blond", "brown")) %>%
View()
# Filter out cases
dat %>% filter(!(height >=100)) %>%
View()
# First 5 rows
slice(dat, 1:5)
# slice_head() for rows at the top of the df
# n refers to amount of desired observations
slice_head(dat, n = 3)
# slice_tail() for rows at the bottom of the df
dat %>% slice_tail(n = 4)
# slice_sample() for random selection
# prop for proportion of cases
dat %>% slice_sample(n = 4)
dat %>% slice_sample(prop = 0.1)
# slice_max() for rows with highest values of a variable
dat %>% slice_max(height, n = 3)
# slice_min() for rows with lowest values of a variable
dat %>% slice_min(mass, n = 3)
# slice_min() for rows with lowest values of a variable
dat %>% slice_min(mass, n = 3)
## arrange()
# slice_sample() for random selection
# prop for proportion of cases
dat %>% slice_sample(n = 4)
# slice_sample() for random selection
# prop for proportion of cases
dat %>% slice_sample(n = 4)
# slice_sample() for random selection
# prop for proportion of cases
dat %>% slice_sample(n = 4)
# slice_sample() for random selection
# prop for proportion of cases
dat %>% slice_sample(n = 4)
dat %>% slice_sample(prop = 0.1)
height
# slice_max() for rows with highest values of a variable
dat %>% slice_max(height, n = 3)
# slice_min() for rows with lowest values of a variable
dat %>% slice_min(mass, n = 3)
# Default is ascending
dat %>% slice(1:5) %>%
arrange(mass) %>%
View()
# Descending
dat %>% slice(1:5) %>%
arrange(desc(mass)) %>%
View()
# Select by name of columns
dat1 %>% select(name, hair_color) %>%
View()
dat1 %>% select(name:hair_color) %>%
View()
# Select columns by feature
dat1 %>% select(contains("color")) %>%
View()
dat1 %>% select(-ends_with("color")) %>%
# opposite is starts_with()
View()
# Rename variables
# Not recommended because it drops all other variables
dat1 %>% select(fabulous_name = name) %>%
View()
# Reorder
dat1 %>% select(name, hair_color, skin_color, everything()) %>%
View()
dat1 %>% rename(fabulous_name = name) %>%
View()
dat1 %>% mutate(BMI = mass/(height^2)) %>%
select(name, BMI, everything())
# Constructing a BMI column
dat1$height <- dat1$height/100
dat1 %>% mutate(BMI = mass/(height^2)) %>%
select(name, BMI, everything())
# transmute() to only keep the new variables
# Instead of separately preparing the height measure, you can
# also include it in the function
dat1 %>% transmute(
height_m = height / 100,
BMI = mass / (height_m^2)
)
# Unnamed columns
dat %>% slice(1:5) %>%
mutate(height + 10)
# Putting height after eye_color
dat1 %>% relocate(mass:eye_color, .before = height)
?summarize
# Variation: summarise_at() to affect variables selected with a
# character vector or vars()
dat %>% summarise_at(vars(c(2, 7)), mean, na.rm = TRUE)
dat %>% summarise_at("mass", mean, na.rm = TRUE)
:
dat %>% summarise_at(vars(height:mass), mean, na.rm = TRUE)
# Variation: summarise_if() affects variables selected with a
# predicate function
dat %>% summarise_if(is.numeric, mean, na.rm = TRUE)
# Instead of the mean height across all creatues, let's focus mean height
# for each species
dat %>% group_by(species) %>%
select(height, mass) %>%
summarize(
mean_height = mean(height, na.rm = TRUE),
mean_mass = mean(mass, na.rm = TRUE)
)
# Counting the rows by species
dat %>% count(species)
table(dat$species)
# Count the frequency of weights (mass) for each gender
dat %>% count(gender, wt = mass)
## grep()
?grep
## Structure: grep(pattern, vector)
grep("blond", dat$hair_color)
dat[, 3]
dat[1, 3]
dat[grep("blond", dat$hair_color),]
,grep("color", colnames(dat))
dat[,grep("color", colnames(dat))]
## Structure: gsub(pattern_to_be_replaced, new_pattern, df)
gsub("brown", "brunette", dat$hair_color)
dat_na %>% mutate_at(vars(hair_color), ~gsub("brown", "brunette",.)) %>%
View()
## pivot_longer(), formally known as gather()
?pivot_longer
dat_long <- dat %>% pivot_longer(cols = ends_with("color"),
names_to = "col", "value") %>%
select(name, col, value, everything())
dat_long <- dat %>% pivot_longer(cols = ends_with("color"),
names_to = "col", "value") %>%
select(name, col, value, everything())
View(dat_long)
dat_long %>% pivot_wider(names_from = col,
values_from = value) %>%
View()
dat_long %>% pivot_wider(names_from = col,
values_from = value) %>%
select(name, hair_color, eye_color,
skin_color, everything()) %>%
View()
?log
